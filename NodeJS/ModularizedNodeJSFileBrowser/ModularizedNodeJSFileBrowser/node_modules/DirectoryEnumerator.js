require('mscorlib');
var fs = require('fs');
////////////////////////////////////////////////////////////////////////////////
// DirectoryEnumerator.Enumerator
var $Enumerator = function() {
};
$Enumerator.enumerateDirectory = function(physicalPath) {
	var $state = 0, $tcs = new ss.TaskCompletionSource(), $t1, files, statTasks, $t2, result, i, t;
	var $sm = function() {
		try {
			$sm1:
			for (;;) {
				switch ($state) {
					case 0: {
						$state = -1;
						$t1 = ss.Task.fromNode(fs, 'readdir', physicalPath);
						$state = 1;
						$t1.continueWith($sm);
						return;
					}
					case 1: {
						$state = -1;
						files = $t1.getResult();
						statTasks = files.map(function(f) {
							return ss.Task.fromNode(fs, 'stat', physicalPath + '\\' + f);
						});
						$state = 2;
						continue $sm1;
					}
					case 2:
					case 3:
					case 4: {
						if ($state === 2) {
							$state = 3;
						}
						try {
							$sm2:
							for (;;) {
								switch ($state) {
									case 3: {
										$state = -1;
										$t2 = ss.Task.whenAll(statTasks);
										$state = 4;
										$t2.continueWith($sm);
										return;
									}
									case 4: {
										$state = -1;
										$t2.getResult();
										$state = -1;
										break $sm2;
									}
									default: {
										break $sm2;
									}
								}
							}
						}
						catch ($t3) {
							$t3 = ss.Exception.wrap($t3);
							if (Type.isInstanceOfType($t3, ss.AggregateException)) {
							}
							else {
								throw $t3;
							}
						}
						result = [];
						for (i = 0; i < files.length; i++) {
							t = statTasks[i];
							if (t.isFaulted()) {
								result.add({ name: files[i], error: Type.cast(t.exception.get_innerExceptions()[0], ss.JsErrorException).get_error() });
							}
							else {
								result.add({ name: files[i], isDirectory: t.getResult().isDirectory(), size: t.getResult().size, error: null });
							}
						}
						$tcs.setResult(result);
						return;
					}
					default: {
						break $sm1;
					}
				}
			}
		}
		catch ($t4) {
			$tcs.setException(ss.Exception.wrap($t4));
		}
	};
	$sm();
	return $tcs.task;
};
Type.registerClass(exports, 'Enumerator', $Enumerator, Object);
